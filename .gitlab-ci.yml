stages:
  - install
  - deploy
  - test

variables:
  NODE_ENV: test
  AWS_DEFAULT_REGION: eu-west-1

cache:
  key: ${CI_PROJECT_NAME}
  paths:
    - ~/.npm

install_backend:
  stage: install
  tags:
    - docker
  image: node:20
  before_script:
    - rm -f .git/index.lock .git/config.lock .git/shallow.lock
    - node -v
    - npm -v
  script:
    - echo "ðŸ“¦ Installing root dependencies..."
    - npm install

build_and_deploy_lambda:
  stage: deploy
  tags:
    - docker
  image: node:20
  before_script:
    - node -v
    - npm -v
  script:
    - apt-get update && apt-get install -y zip awscli
    - echo "ðŸ“¦ Building and deploying selected Lambda functions..."
    - export ZIP_OUTPUT_DIR="$CI_PROJECT_DIR/backend/build_zips"
    - mkdir -p "$ZIP_OUTPUT_DIR"
    - cd backend/src/handlers
    - |
      for dir in generateChat generateCompletion generateRoleplay generatePhrases userInfo; do
        if [ -f "$dir/index.mjs" ]; then
          echo "ðŸ“¦ Installing dependencies and zipping $dir"
          cd "$dir"
          [ -f "package.json" ] && npm install --omit=dev
          zip_file="$ZIP_OUTPUT_DIR/${dir}.zip"
          zip -q -r9 "$zip_file" ./*
          echo "ðŸš€ Deploying $dir to Lambda..."
          aws lambda update-function-code \
            --function-name "$dir" \
            --zip-file "fileb://$zip_file" \
            --region "$AWS_DEFAULT_REGION"
          cd ..
        fi
      done
    - echo "ðŸŽ‰ All selected Lambda functions built and deployed!"

  only:
    - backend

test_backend_lambda:
  stage: test
  tags:
    - docker
  image:
    name: amazon/aws-cli:latest
    entrypoint: [""]
  before_script:
    - echo "Checking AWS CLI version..."
    - cd backend/src
    - aws --version
  script:
    - echo "Invoking AWS Lambda function 'generateRoleplay'..."
    - aws lambda invoke --function-name generateRoleplay --payload fileb://tests/payloads/generateRoleplay/generateRoleplay.json generateRoleplay_output.json --log-type Tail
    - cat generateRoleplay_output.json

    - echo "Invoking AWS Lambda function 'getRoleplayHistory'..."
    - aws lambda invoke --function-name generateRoleplay --payload fileb://tests/payloads/generateRoleplay/getRoleplayHistory.json getRoleplayHistory_output.json --log-type Tail
    - cat getRoleplayHistory_output.json

    - echo "Invoking AWS Lambda function 'saveRoleplayHistory'..."
    - aws lambda invoke --function-name generateRoleplay --payload fileb://tests/payloads/generateRoleplay/saveRoleplayHistory.json saveRoleplayHistory_output.json --log-type Tail
    - cat saveRoleplayHistory_output.json

    - echo "Invoking Lambda function 'userInfo' - GET user..."
    - aws lambda invoke --function-name userInfo --payload fileb://tests/payloads/userInfo/getUser.json getUser_output.json --log-type Tail
    - cat getUser_output.json

    - echo "Invoking Lambda function 'userInfo' - POST user..."
    - aws lambda invoke --function-name userInfo --payload fileb://tests/payloads/userInfo/saveUser.json saveUser_output.json --log-type Tail
    - cat saveUser_output.json

  only:
    - backend
