stages:
  - install
  - build
  - test
  - deploy
  - test

variables:
  NODE_ENV: test
  AWS_DEFAULT_REGION: eu-west-1

before_script:
  - rm -f .git/index.lock .git/config.lock .git/shallow.lock
  - node -v
  - npm -v
  - mkdir -p ~/.ssh
  - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
  - chmod 600 ~/.ssh/id_rsa
  - echo "OPENAI_API_KEY=$OPENAI_API_KEY" > frontend/.env
  - echo "OPENAI_API_KEY=$OPENAI_API_KEY" > backend/.env

install_frontend:
  image: node:20
  stage: install
  script:
    - cd frontend
    - npm install
  cache:
    key: npm-frontend
    paths:
      - frontend/node_modules/
  tags:
    - docker  
  variables:
    GIT_DEPTH: 0

install_backend:
  stage: install
  tags:
    - docker
  image: node:20
  script:
    - echo "ðŸ“¦ Installing root dependencies..."
    - npm install
    - echo "ðŸ“¦ Installing handler dependencies..."
    - cd backend/src/handlers
    - |
      for dir in */; do
        if [ -f "$dir/package.json" ]; then
          echo "ðŸ“¦ Installing in $dir"
          cd "$dir"
          npm install --omit=dev
          cd ..
        fi
      done

upload_lambda_layer:
  stage: build
  image:
    name: node:20
  script:
    - echo "ðŸ“¦ Building Lambda Layer..."
    - cd backend/layers
    - zip -r layer.zip nodejs
  artifacts:
    paths:
      - backend/layers/layer.zip
  tags:
    - docker

publish_lambda_layer:
  stage: deploy
  image:
    name: amazon/aws-cli:latest
    entrypoint: [""]
  dependencies:
    - upload_lambda_layer
  script:
    - echo "ðŸš€ Uploading Lambda Layer..."
    - aws lambda publish-layer-version \
        --layer-name common-dependencies \
        --zip-file fileb://backend/layers/layer.zip \
        --compatible-runtimes nodejs20.x \
        --region $AWS_DEFAULT_REGION
  only:
    - backend_CI
  tags:
    - docker

build_frontend:
  image: node:20
  stage: build
  dependencies:
    - install_frontend
  cache:
    key: npm-frontend
    paths:
      - frontend/node_modules/
  script:
    - cd frontend
    - npm run build
  tags:
    - docker
  artifacts:
    paths:
      - frontend/build/
    expire_in: 1h

build_lambda_functions:
  stage: build
  tags:
    - docker
  image: node:20
  before_script:
    - node -v
    - npm -v
  script:
    - apt-get update && apt-get install -y zip
    - echo "ðŸ“¦ Zipping Lambda functions..."
    - export ZIP_OUTPUT_DIR="$CI_PROJECT_DIR/backend/build_zips"
    - mkdir -p "$ZIP_OUTPUT_DIR"
    - cd backend/src/handlers
    - |
      for dir in */; do
        if [ -f "$dir/index.mjs" ]; then
          echo "ðŸ“¦ Zipping $dir"
          cd "$dir"
          zip -q -r9 "$ZIP_OUTPUT_DIR/${dir%/}.zip" ./*
          cd ..
        fi
      done
  artifacts:
    paths:
      - backend/build_zips/

deploy_frontend:
  image: node:18
  stage: deploy
  script:
    - cd frontend
    - mv build public
  only:
    - backend_CI
  tags:
    - docker

deploy_lambda:
  stage: deploy
  tags:
    - docker
  image:
    name: amazon/aws-cli:latest
    entrypoint: [""]
  dependencies:
    - build_lambda_functions
  before_script:
    - rm -f .git/index.lock .git/config.lock .git/shallow.lock
  script:
    - echo "ðŸš€ Deploying Lambda functions..."
    - chmod +x backend/deploy_lambda.sh
    - ./backend/deploy_lambda.sh
  only:
    - backend_CI

test_frontend:
  image: node:20
  stage: test
  dependencies:
    - install_frontend
  script:
    - cd frontend
    - npm run test:ci
  cache:
    key: npm-frontend
    paths:
      - frontend/node_modules/
  tags:
    - docker

test_backend_lambda:
  stage: test
  tags:
    - docker
  image:
    name: amazon/aws-cli:latest
    entrypoint: [""]
  before_script:
    - echo "Checking AWS CLI version..."
    - cd backend/src
    - aws --version
  script:
    - echo "Invoking AWS Lambda function 'generateRoleplay'..."
    - aws lambda invoke --function-name generateRoleplay --payload fileb://tests/payloads/generateRoleplay/generateRoleplay.json generateRoleplay_output.json --log-type Tail
    - cat generateRoleplay_output.json

    - echo "Invoking AWS Lambda function 'getRoleplayHistory'..."
    - aws lambda invoke --function-name generateRoleplay --payload fileb://tests/payloads/generateRoleplay/getRoleplayHistory.json getRoleplayHistory_output.json --log-type Tail
    - cat getRoleplayHistory_output.json

    - echo "Invoking AWS Lambda function 'saveRoleplayHistory'..."
    - aws lambda invoke --function-name generateRoleplay --payload fileb://tests/payloads/generateRoleplay/saveRoleplayHistory.json saveRoleplayHistory_output.json --log-type Tail
    - cat saveRoleplayHistory_output.json

    - echo "Invoking Lambda function 'userInfo' - GET user..."
    - aws lambda invoke --function-name userInfo --payload fileb://tests/payloads/userInfo/getUser.json getUser_output.json --log-type Tail
    - cat getUser_output.json

    - echo "Invoking Lambda function 'userInfo' - POST user..."
    - aws lambda invoke --function-name userInfo --payload fileb://tests/payloads/userInfo/saveUser.json saveUser_output.json --log-type Tail
    - cat saveUser_output.json

    - echo "Invoking AWS Lambda function 'generateChat'..."
    - aws lambda invoke --function-name generateChat --payload fileb://tests/payloads/generateChat/generateChat.json generateChat_output.json --log-type Tail
    - cat generateChat_output.json

    - echo "Invoking AWS Lambda function 'generateChatMissingFields'..."
    - aws lambda invoke --function-name generateChat --payload fileb://tests/payloads/generateChat/generateChatMissingFields.json generateChatMissingFields_output.json --log-type Tail
    - cat generateChatMissingFields_output.json

    - echo "Invoking AWS Lambda function 'generateChatInvalidWeek'..."
    - aws lambda invoke --function-name generateChat --payload fileb://tests/payloads/generateChat/generateChatInvalidWeek.json generateChatInvalidWeek_output.json --log-type Tail
    - cat generateChatInvalidWeek_output.json

    - echo "Invoking AWS Lambda function 'generateChatMissingMsg'..."
    - aws lambda invoke --function-name generateChat --payload fileb://tests/payloads/generateChat/generateChatMissingMsg.json generateChatMissingMsg_output.json --log-type Tail
    - cat generateChatMissingMsg_output.json

    - echo "Invoking AWS Lambda function 'generateChatDiffLanguage'..."
    - aws lambda invoke --function-name generateChat --payload fileb://tests/payloads/generateChat/generateChatDiffLanguage.json generateChatDiffLanguage_output.json --log-type Tail
    - cat generateChatDiffLanguage_output.json

    - echo "Invoking AWS Lambda function 'getChatHistory'..."
    - aws lambda invoke --function-name generateChat --payload fileb://tests/payloads/generateChat/getChatHistory.json getChatHistory_output.json --log-type Tail
    - cat getChatHistory_output.json

    - echo "Invoking AWS Lambda function 'saveChatMessage'..."
    - aws lambda invoke --function-name generateChat --payload fileb://tests/payloads/generateChat/saveChatMessage.json saveChatMessage_output.json --log-type Tail
    - cat saveChatMessage_output.json

    - echo "Invoking AWS Lambda function 'getCompletion'..."
    - aws lambda invoke --function-name generateCompletion --payload fileb://tests/payloads/generateCompletion/generateCompletion.json generateCompletion_output.json --log-type Tail
    - cat generateCompletion_output.json

    - echo "Invoking AWS Lambda function 'getCompletion'..."
    - aws lambda invoke --function-name generateCompletion --payload fileb://tests/payloads/generateCompletion/generateCompletionTest2.json generateCompletionTest2_output.json --log-type Tail
    - cat generateCompletionTest2_output.json

    - echo "Invoking AWS Lambda function 'getCompletion'..."
    - aws lambda invoke --function-name generateCompletion --payload fileb://tests/payloads/generateCompletion/InvalidOutlineGeneration.json InvalidOutlineGeneration_output.json --log-type Tail
    - cat InvalidOutlineGeneration_output.json

    - echo "Invoking AWS Lambda function 'saveCourseOutline'..."
    - aws lambda invoke --function-name generateCompletion --payload fileb://tests/payloads/generateCompletion/InvalidPutRequest.json InvalidPutRequest_output.json --log-type Tail
    - cat InvalidPutRequest_output.json

    - echo "Invoking AWS Lambda function 'saveCourseOutline'..."
    - aws lambda invoke --function-name generateCompletion --payload fileb://tests/payloads/generateCompletion/InvalidSaveCompletion.json InvalidSaveCompletion_output.json --log-type Tail
    - cat InvalidSaveCompletion_output.json

    - echo "Invoking AWS Lambda function 'saveCourseOutline'..."
    - aws lambda invoke --function-name generateCompletion --payload fileb://tests/payloads/generateCompletion/saveCompletion.json saveCompletion_output.json --log-type Tail
    - cat saveCompletion_output.json

    - echo "Invoking AWS Lambda function 'saveCourseOutline'..."
    - aws lambda invoke --function-name generateCompletion --payload fileb://tests/payloads/generateCompletion/validPutRequest.json validPutRequest_output.json --log-type Tail
    - cat validPutRequest_output.json

    - echo "Invoking AWS Lambda function 'getCourseOutlineHistory'..."
    - aws lambda invoke --function-name generateCompletion --payload fileb://tests/payloads/generateCompletion/getOutlineEmailOnly.json getOutlineEmailOnly_output.json --log-type Tail
    - cat getOutlineEmailOnly_output.json

    - echo "Invoking AWS Lambda function 'getCourseOutlineHistory'..."
    - aws lambda invoke --function-name generateCompletion --payload fileb://tests/payloads/generateCompletion/getOutlineEmailTitle.json getOutlineEmailTitle_output.json --log-type Tail
    - cat getOutlineEmailTitle_output.json

    - echo "Invoking AWS Lambda function 'getCourseOutlineHistory'..."
    - aws lambda invoke --function-name generateCompletion --payload fileb://tests/payloads/generateCompletion/getRequestNoCoursesFound.json getRequestNoCoursesFound_output.json --log-type Tail
    - cat getRequestNoCoursesFound_output.json

    - echo "Invoking AWS Lambda function 'getCourseOutlineHistory'..."
    - aws lambda invoke --function-name generateCompletion --payload fileb://tests/payloads/generateCompletion/InvalidGetRequest.json InvalidGetRequest_output.json --log-type Tail
    - cat InvalidGetRequest_output.json

  only:
    - backend_CI
