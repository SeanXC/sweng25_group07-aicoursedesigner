stages:
  - install
  - build
  - deploy
  - test

variables:
  NODE_ENV: test
  AWS_DEFAULT_REGION: eu-west-1

install_backend:
  stage: install
  tags:
    - docker
  image: node:20
  before_script:
    - rm -f .git/index.lock .git/config.lock .git/shallow.lock
    - node -v
    - npm -v
  script:
    - echo "ðŸ“¦ Installing root dependencies..."
    - npm install
    - echo "ðŸ“¦ Installing handler dependencies..."
    - cd backend/src/handlers
    - |
      for dir in */; do
        if [ -f "$dir/package.json" ]; then
          echo "ðŸ“¦ Installing in $dir"
          cd "$dir"
          npm install --omit=dev
          cd ..
        fi
      done

build_lambda_functions:
  stage: build
  tags:
    - docker
  image: node:20
  before_script:
    - node -v
    - npm -v
  script:
    - apt-get update && apt-get install -y zip
    - echo "ðŸ“¦ Zipping Lambda functions..."
    - export ZIP_OUTPUT_DIR="$CI_PROJECT_DIR/backend/build_zips"
    - mkdir -p "$ZIP_OUTPUT_DIR"
    - cd backend/src/handlers
    - |
      for dir in */; do
        if [ -f "$dir/index.mjs" ]; then
          echo "ðŸ“¦ Zipping $dir"
          cd "$dir"
          zip -q -r9 "$ZIP_OUTPUT_DIR/${dir%/}.zip" ./*
          cd ..
        fi
      done
  artifacts:
    paths:
      - backend/build_zips/

deploy_lambda:
  stage: deploy
  tags:
    - docker
  image:
    name: amazon/aws-cli:latest
    entrypoint: [""]
  dependencies:
    - build_lambda_functions
  script:
    - echo "ðŸš« Deploy step is currently disabled."
    # - echo "ðŸš€ Deploying Lambda functions..."
    # - |
    #   for zip_file in backend/build_zips/*.zip; do
    #     function_name=$(basename "$zip_file" .zip)
    #     echo "ðŸ”„ Updating $function_name"
    #     aws lambda update-function-code \
    #       --function-name "$function_name" \
    #       --zip-file "fileb://$zip_file" \
    #       --region "$AWS_DEFAULT_REGION"
    #     echo "âœ… Updated $function_name"
    #   done
    # - echo "ðŸŽ‰ All Lambda functions deployed!"
  only:
    - backend

test_backend_lambda:
  stage: test
  tags:
    - docker
  image:
    name: amazon/aws-cli:latest
    entrypoint: [""]
  before_script:
    - echo "Checking AWS CLI version..."
    - cd backend/src
    - aws --version
  script:
    - echo "Invoking AWS Lambda function 'generateRoleplay'..."
    - aws lambda invoke --function-name generateRoleplay --payload fileb://tests/payloads/generateRoleplay/generateRoleplay.json generateRoleplay_output.json --log-type Tail
    - cat generateRoleplay_output.json

    - echo "Invoking AWS Lambda function 'getRoleplayHistory'..."
    - aws lambda invoke --function-name generateRoleplay --payload fileb://tests/payloads/generateRoleplay/getRoleplayHistory.json getRoleplayHistory_output.json --log-type Tail
    - cat getRoleplayHistory_output.json

    - echo "Invoking AWS Lambda function 'saveRoleplayHistory'..."
    - aws lambda invoke --function-name generateRoleplay --payload fileb://tests/payloads/generateRoleplay/saveRoleplayHistory.json saveRoleplayHistory_output.json --log-type Tail
    - cat saveRoleplayHistory_output.json

    - echo "Invoking Lambda function 'userInfo' - GET user..."
    - aws lambda invoke --function-name userInfo --payload fileb://tests/payloads/userInfo/getUser.json getUser_output.json --log-type Tail
    - cat getUser_output.json

    - echo "Invoking Lambda function 'userInfo' - POST user..."
    - aws lambda invoke --function-name userInfo --payload fileb://tests/payloads/userInfo/saveUser.json saveUser_output.json --log-type Tail
    - cat saveUser_output.json

    - echo "Invoking AWS Lambda function 'generateChat'..."
    - aws lambda invoke --function-name generateChat --payload fileb://tests/payloads/generateChat/generateChat.json generateChat_output.json --log-type Tail
    - cat generateChat_output.json

    - echo "Invoking AWS Lambda function 'generateChatMissingFields'..."
    - aws lambda invoke --function-name generateChat --payload fileb://tests/payloads/generateChat/generateChatMissingFields.json generateChatMissingFields_output.json --log-type Tail
    - cat generateChatMissingFields_output.json

    - echo "Invoking AWS Lambda function 'generateChatInvalidWeek'..."
    - aws lambda invoke --function-name generateChat --payload fileb://tests/payloads/generateChat/generateChatInvalidWeek.json generateChatInvalidWeek_output.json --log-type Tail
    - cat generateChatInvalidWeek_output.json

    - echo "Invoking AWS Lambda function 'generateChatMissingMsg'..."
    - aws lambda invoke --function-name generateChat --payload fileb://tests/payloads/generateChat/generateChatMissingMsg.json generateChatMissingMsg_output.json --log-type Tail
    - cat generateChatMissingMsg_output.json

    - echo "Invoking AWS Lambda function 'generateChatDiffLanguage'..."
    - aws lambda invoke --function-name generateChat --payload fileb://tests/payloads/generateChat/generateChatDiffLanguage.json generateChatDiffLanguage_output.json --log-type Tail
    - cat generateChatDiffLanguage_output.json

    - echo "Invoking AWS Lambda function 'getChatHistory'..."
    - aws lambda invoke --function-name generateChat --payload fileb://tests/payloads/generateChat/getChatHistory.json getChatHistory_output.json --log-type Tail
    - cat getChatHistory_output.json

    - echo "Invoking AWS Lambda function 'saveChatMessage'..."
    - aws lambda invoke --function-name generateChat --payload fileb://tests/payloads/generateChat/saveChatMessage.json saveChatMessage_output.json --log-type Tail
    - cat saveChatMessage_output.json
  only:
    - backend
